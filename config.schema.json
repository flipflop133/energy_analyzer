{
    "$schema": "https://json-schema.org/draft-07/schema#",
    "$id": "https://example.com/energy-regression.schema.json",
    "title": "Industry-Grade Energy Regression Pipeline Schema",
    "description": "Defines a standardized, extensible configuration for running energy regression tests or benchmarks across Git commits.",
    "type": "object",
    "properties": {
        "configVersion": {
            "type": "string",
            "description": "Version of this configuration format (to allow future backward-incompatible changes).",
            "examples": [
                "1.0.0"
            ]
        },
        "repo": {
            "$ref": "#/$defs/RepositoryDefinition"
        },
        "executionPlan": {
            "$ref": "#/$defs/ExecutionPlanDefinition"
        },
        "results": {
            "$ref": "#/$defs/ResultsDefinition"
        },
        "limits": {
            "$ref": "#/$defs/LimitsDefinition"
        },
        "trackedFileExtensions": {
            "type": "array",
            "description": "File extensions or specific file patterns that, if changed, indicate a commit is worth testing.",
            "items": {
                "type": "string",
                "minLength": 1
            },
            "uniqueItems": true,
            "examples": [
                [
                    "c",
                    "CMakeLists.txt",
                    "h",
                    "sh",
                    "ac"
                ]
            ]
        },
        "cpuThermalFile": {
            "type": "string",
            "description": "Path to the file that reports CPU temperature in millidegrees Celsius (e.g., /sys/class/hwmon/hwmon2/temp1_input).",
            "minLength": 1
        },
        "compileCommands": {
            "type": "array",
            "description": "Shell commands that build or prepare the project for testing or benchmarking.",
            "items": {
                "type": "string",
                "minLength": 1
            },
            "examples": [
                [
                    "make clean || true",
                    "./configure --enable-optimizations",
                    "make -j$(nproc) CC=\"ccache gcc\""
                ]
            ]
        },
        "setupCommands": {
            "type": "array",
            "description": "Optional system-level commands to run before all tests (install dependencies, configure environment, etc.).",
            "items": {
                "type": "string",
                "minLength": 1
            },
            "examples": [
                [
                    "sudo apt-get install -y ccache",
                    "pip install -r requirements.txt"
                ]
            ]
        }
    },
    "required": [
        "repo",
        "executionPlan",
        "results",
        "limits",
        "trackedFileExtensions",
        "cpuThermalFile",
        "compileCommands"
    ],
    "$defs": {
        "RepositoryDefinition": {
            "title": "Repository Configuration",
            "type": "object",
            "description": "Information for cloning and tracking a Git repositoryâ€™s commits, branches, or tags.",
            "properties": {
                "url": {
                    "type": "string",
                    "format": "uri",
                    "description": "URL of the remote Git repository.",
                    "minLength": 1,
                    "examples": [
                        "https://github.com/example/project.git"
                    ]
                },
                "branch": {
                    "type": "string",
                    "description": "Name of the branch to check out when analyzing commits (e.g. 'main' or 'master').",
                    "minLength": 1,
                    "examples": [
                        "main"
                    ]
                },
                "cloneOptions": {
                    "type": "array",
                    "description": "Extra arguments for the `git clone` command. For example, shallow clones.",
                    "items": {
                        "type": "string",
                        "minLength": 1
                    },
                    "default": [],
                    "examples": [
                        [
                            "--depth",
                            "1"
                        ]
                    ]
                }
            },
            "required": [
                "url",
                "branch"
            ]
        },
        "ExecutionPlanDefinition": {
            "title": "Execution Plan",
            "type": "object",
            "description": "Controls how commits are selected and tested, along with optional pre/post commands.",
            "properties": {
                "mode": {
                    "type": "string",
                    "enum": [
                        "tests",
                        "benchmarks"
                    ],
                    "description": "High-level category of the tasks to run (e.g., unit tests or performance benchmarks).",
                    "examples": [
                        "tests",
                        "benchmarks"
                    ]
                },
                "granularity": {
                    "type": "string",
                    "enum": [
                        "commits",
                        "branches",
                        "tags"
                    ],
                    "description": "Determines whether to test each commit, each branch, or each tag in the repository.",
                    "examples": [
                        "commits",
                        "branches",
                        "tags"
                    ]
                },
                "preCommand": {
                    "type": "string",
                    "description": "Command run before each test (e.g., a setup or configuration command).",
                    "minLength": 1,
                    "examples": [
                        "./autogen.sh && ./configure"
                    ]
                },
                "preCommandConditionFiles": {
                    "type": "array",
                    "description": "If set, `preCommand` only runs if the current commit modifies at least one of these files.",
                    "items": {
                        "type": "string",
                        "minLength": 1
                    },
                    "default": [],
                    "examples": [
                        [
                            "configure.ac",
                            "Makefile.am"
                        ]
                    ]
                },
                "testCommand": {
                    "type": "string",
                    "description": "Main command for running tests or benchmarks (e.g., make check, pytest, etc.).",
                    "minLength": 1,
                    "examples": [
                        "make -j$(nproc) check",
                        "pytest --maxfail=1 --disable-warnings"
                    ]
                },
                "testCommandPath": {
                    "type": "string",
                    "description": "Working directory where the main test command should be run.",
                    "default": "",
                    "examples": [
                        "/build-ninja",
                        "./tests"
                    ]
                },
                "postCommand": {
                    "type": "string",
                    "description": "Command run after each test (optional cleanup, etc.).",
                    "minLength": 1,
                    "nullable": true,
                    "examples": [
                        "make clean"
                    ]
                },
                "numCommits": {
                    "type": "integer",
                    "description": "Number of recent commits (from HEAD) to evaluate. Ignored if `granularity` is branches or tags.",
                    "minimum": 1,
                    "examples": [
                        50,
                        100
                    ]
                },
                "numRuns": {
                    "type": "integer",
                    "description": "Number of times to run the test suite per commit to reduce measurement variance.",
                    "minimum": 1,
                    "examples": [
                        5
                    ]
                },
                "numRepeats": {
                    "type": "integer",
                    "description": "Number of repetitions of the entire test suite (e.g., run the same tests multiple times).",
                    "minimum": 1,
                    "examples": [
                        3
                    ]
                },
                "batchSize": {
                    "type": "integer",
                    "description": "Maximum number of commits to process per batch, for memory/time reasons.",
                    "minimum": 1,
                    "default": 100,
                    "examples": [
                        10,
                        50
                    ]
                },
                "randomizeTasks": {
                    "type": "boolean",
                    "description": "If true, shuffle the order of test tasks across commits/runs.",
                    "default": false
                }
            },
            "required": [
                "mode",
                "granularity",
                "preCommand",
                "testCommand",
                "numCommits",
                "numRuns",
                "numRepeats",
                "batchSize"
            ]
        },
        "ResultsDefinition": {
            "title": "Results Configuration",
            "type": "object",
            "description": "Specifies how and where to store pipeline outputs, logs, or aggregated metrics.",
            "properties": {
                "file": {
                    "type": "string",
                    "description": "Filepath to write CSV or other structured output containing energy or performance data.",
                    "minLength": 1,
                    "examples": [
                        "results/energy_usage.csv"
                    ]
                }
            },
            "required": [
                "file"
            ]
        },
        "LimitsDefinition": {
            "title": "Limits & Thresholds",
            "type": "object",
            "description": "Constraints for temperature, potential regressions, and other environmental checks.",
            "properties": {
                "temperatureSafeLimit": {
                    "type": "integer",
                    "description": "Maximum CPU temperature (in millidegrees Celsius) at which tests can safely run (e.g. 90000 = 90Â°C).",
                    "minimum": 0,
                    "maximum": 150000,
                    "examples": [
                        90000
                    ]
                },
                "energyRegressionPercent": {
                    "type": "integer",
                    "description": "Allowed increase in energy usage (as a percentage) before considering it a regression.",
                    "minimum": 0,
                    "maximum": 100,
                    "examples": [
                        15
                    ]
                }
            },
            "required": [
                "temperatureSafeLimit",
                "energyRegressionPercent"
            ]
        }
    }
}