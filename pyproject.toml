[project]
name = "energy_analyzer"
version = "0.1.0"
description = "Pipeline for analyzing energy data"

dependencies = []
requires-python = ">=3.13,<3.14"
readme = "README.md"

[tool.ruff]
line-length = 127
target-version = "py313"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
docstring-code-format = true
line-ending = "lf"

[tool.ruff.lint]
select = [
  "D",  # pydocstyle (Enforces docstrings)
  "DOC", # pydoclint (Enforces docstrings)
  "E",  # pycodestyle (Style guide enforcement)
  "F",  # Pyflakes (Error detection)
  "UP",  # pyupgrade (Upgrades old Python syntax)
  "ANN",  # flake8-annotations (Ensure function annotations)
  "ARG",  # flake8-unused-arguments (Detect unused arguments)
  "B",  # flake8-bugbear (Detects bugs and design issues)
  "T20",  # flake8-print (Detect print statements)
  "SIM",  # flake8-simplify (Simplify redundant code)
  "I",  # isort (Sort imports)
  "PERF",  # perflint (Performance optimizations)
  "C90",  # mccabe (Complexity checker)
  "ERA",  # eradicate (Remove commented-out code)
  "N",  # pep8-naming (Naming conventions)
  "PL",  # pylint (More extensive linting)
  "TRY",  # flake8-tryceratops (Improve try-except blocks)
  "Q",  # flake8-quotes (Quote consistency)
  "COM",  # flake8-commas (Enforce trailing commas)
  "RUF",  # Ruff-specific checks
]

#exclude = ["tests/**", ".venv/**"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.pyright]
pythonVersion = "3.13"
venvPath = ".venv"
typeCheckingMode = "strict"
reportMissingImports = true
reportUnusedVariable = true
reportUnusedFunction = true
reportUnnecessaryTypeIgnoreComment = true
reportUnnecessaryCast = true
reportUnreachableCode = true
reportIncompatibleVariableOverride = true

[tool.pytest.ini_options]
addopts = "--tb=short --strict-markers"
testpaths = "tests"
pythonpath = "src"

[tool.pylint.main]
init-hook = "import sys; from pathlib import Path; sys.path.insert(0, str(Path().resolve() / 'src'))"
jobs = 0 # multiprocessing pylint
max-line-length = 127
load-plugins = [
    "pylint.extensions.check_elif",
    "pylint.extensions.bad_builtin",
    "pylint.extensions.docparams",
    "pylint.extensions.for_any_all",
    "pylint.extensions.set_membership",
    "pylint.extensions.code_style",
    "pylint.extensions.overlapping_exceptions",
    "pylint.extensions.typing",
    "pylint.extensions.redefined_variable_type",
    "pylint.extensions.comparison_placement",
    "pylint.extensions.broad_try_clause",
    "pylint.extensions.dict_init_mutate",
    "pylint.extensions.consider_refactoring_into_while_condition"
]

[tool.pylint.parameter_documentation]
# we require docstrings of public methods to document everything
accept-no-param-doc = false
accept-no-raise-doc = false
accept-no-return-doc = false
accept-no-yields-doc = false
default-docstring-type = "google"

[tool.pylint.'MESSAGES CONTROL']
disable = []
enable = ["all"]